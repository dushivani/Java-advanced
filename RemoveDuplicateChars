Here’s a **Java program** to remove duplicate characters from the given string `"automation"` and return `"automin"`:  

```java

/* Approach 1
import java.util.LinkedHashSet;

public class RemoveDuplicateCharacters {
    public static void main(String[] args) {
        String input = "automation";
        String output = removeDuplicates(input);
        System.out.println("Output: " + output); // Output: automin
    }

    public static String removeDuplicates(String input) {
        LinkedHashSet<Character> set = new LinkedHashSet<>();

        for (int i = 0; i < input.length(); i++) {
            set.add(input.charAt(i)); // Adds characters to set
        }

        StringBuilder result = new StringBuilder();
        for (Character ch : set) {
            result.append(ch); // Appends unique characters
        }

        return result.toString();
    }
}
```

### **Explanation:**  
✔ **Uses `LinkedHashSet<Character>`** → Preserves insertion order and removes duplicates.  
✔ **Iterates through the string** → Adds only unique characters to the result.  
✔ **Efficient approach** → Runs in **O(n) time complexity**.  

### **Output:**  
```
Output: automin
```

This ensures that **each character appears only once** while keeping their original order. 


*/



// Approach 2 

public class RemoveDuplicateCharacters {
    public static void main(String[] args) {
        String input = "automation";
        String output = removeDuplicates(input);
        System.out.println("Output: " + output); // Output: automin
    }

    public static String removeDuplicates(String input) {
        StringBuilder result = new StringBuilder();

        for (int i = 0; i < input.length(); i++) {
            char currentChar = input.charAt(i);

            // Check if current character is already in result
            if (result.indexOf(String.valueOf(currentChar)) == -1) {
                result.append(currentChar);
            }
        }

        return result.toString();
    }
}

